// Generated by CoffeeScript 1.6.3
(function() {
  var Manager, ProjectModel, Twitter, Yahoo, app, db, deleteFolderRecursive, end, express, fs, lodash, m, mongoose, path, projectsPath, twitter, yahoo, _;

  _ = require('lodash');

  yahoo = require('./node/yahoo');

  Yahoo = new yahoo.Yahoo();

  twitter = require('./node/twitter');

  Twitter = new twitter.Twitter();

  path = require('path');

  fs = require('fs');

  lodash = require('lodash');

  db = require('./node/db');

  Manager = require('./node/youwiki').Manager;

  mongoose = require('mongoose');

  deleteFolderRecursive = function(path) {
    var files;
    files = [];
    if (fs.existsSync(path)) {
      files = fs.readdirSync(path);
      files.forEach(function(file, index) {
        var curPath;
        curPath = path + "/" + file;
        if (fs.statSync(curPath).isDirectory()) {
          deleteFolderRecursive(curPath);
        } else {
          fs.unlinkSync(curPath);
        }
      });
      fs.rmdirSync(path);
    }
  };

  projectsPath = path.join(__dirname, 'app', 'projects');

  express = require("express");

  app = express();

  app.set('view engine', 'ejs');

  app.use('/', express["static"](__dirname + '/app'));

  app.use(express.bodyParser());

  app.engine('html', require('ejs').renderFile);

  app.set('db connect string', 'mongodb://localhost/dwikia');

  db.config(app);

  ProjectModel = mongoose.model('Project');

  app.get('/wikipedia/build/:name', function(req, res) {
    return res.json({
      hello: 'world'
    });
  });

  m = new Manager();

  end = function(req, res) {
    return function(meta) {
      var project;
      if (meta === 'error') {
        return res.json({
          result: "error"
        });
      }
      meta.status = 'created';
      project = new ProjectModel();
      project = _.extend(project, meta);
      return project.save(function(err, obj) {
        if (err) {
          return res.json({
            "error": err
          });
        }
        console.log("Returning result...");
        return res.json({
          result: "done"
        });
      });
    };
  };

  app.post('/build/url/', function(req, res) {
    var url;
    url = req.body.url;
    return m.run(url, end(req, res));
  });

  app.post('/build/random/', function(req, res) {
    return m.run('random', end(req, res));
  });

  app.post('/build/today/', function(req, res) {
    return m.run(null, end(req, res));
  });

  app.post('/project/', function(req, res) {
    var status;
    status = req.body.status;
    return ProjectModel.find({
      status: status
    }, function(err, list) {
      return res.json(list);
    });
  });

  app["delete"]('/project/id/:id', function(req, res) {
    var id;
    id = req.params.id;
    return ProjectModel.remove({
      _id: id
    }, function(err, project) {
      return res.json(project);
    });
  });

  app["delete"]('/project/:name', function(req, res) {
    var name;
    name = req.params.name;
    return ProjectModel.remove({
      name: name
    }, function(err, project) {
      deleteFolderRecursive(path.join('app', 'projects', name));
      return res.json(project);
    });
  });

  app.post('/project/:name', function(req, res) {
    var name, status;
    name = req.params.name;
    status = req.body.status;
    return ProjectModel.update({
      name: name
    }, {
      status: status
    }, function(err, project) {
      return res.json(project);
    });
  });

  app.get('/project/:name', function(req, res) {
    var name;
    name = req.params.name;
    return ProjectModel.findOne({
      name: name
    }, function(err, project) {
      return res.json(project);
    });
  });

  app.get('/trends/:name', function(req, res) {
    var name;
    name = req.params.name;
    return Yahoo.woeid(name, function(err, obj) {
      var body, woeid;
      body = JSON.parse(obj.body);
      if (!body.places.place || !body.places.place.length) {
        console.log(obj);
        return res.send(null);
      }
      woeid = body.places.place[0].woeid;
      console.log(woeid);
      return Twitter.trendsFor(woeid, function(err, obj) {
        console.log(obj);
        return res.send(obj);
      });
    });
  });

  app.listen(3000);

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
