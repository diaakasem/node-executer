// Generated by CoffeeScript 1.11.1
(function() {
  var Executer, fs,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Executer = require('./executer').Executer;

  fs = require('fs');

  exports.Say = (function(superClass) {
    extend(Say, superClass);

    Say.prototype.voices = {
      en: ['tom', 'ava'],
      ar: ['tarik']
    };

    function Say(defaultlang) {
      this.defaultlang = defaultlang;
      Say.__super__.constructor.call(this);
    }

    Say.prototype.voice = function(lang) {
      var arr;
      if (lang == null) {
        lang = this.defaultlang;
      }
      arr = lang ? this.voices[lang] : [];
      if (!arr.length) {
        return null;
      }
      return arr[Math.floor(Math.random() * arr.length)];
    };

    Say.prototype.arSay = function(something, callback) {
      var cmd, v;
      v = this.voice('ar');
      cmd = {
        name: 'say',
        command: "say " + something
      };
      if (v) {
        cmd.command += " -v " + v;
      }
      return this.execute(cmd, callback);
    };

    Say.prototype.say = function(something, callback) {
      var cmd, v;
      v = this.voice();
      cmd = {
        name: 'say',
        command: "say " + something
      };
      if (v) {
        cmd.command += " -v " + v;
      }
      return this.execute(cmd, callback);
    };

    Say.prototype.produce = function(audioFile, textFile, callback) {
      var audio, cmd, v;
      audio = {};
      v = this.voice();
      audio.voice = v;
      cmd = {
        name: "say -o \"" + audioFile + "\" -f \"" + textFile + "\" ",
        command: "say -o \"" + audioFile + "\" -f \"" + textFile + "\" "
      };
      if (v) {
        cmd.command += "-v " + v + " ";
      }
      return this.execute(cmd, (function(_this) {
        return function() {
          return _this.toMp3(audioFile, function(file) {
            audio.file = file;
            return typeof callback === "function" ? callback(audio) : void 0;
          });
        };
      })(this));
    };

    Say.prototype.toMp3 = function(file, callback) {
      return fs.unlink(file + ".mp3", (function(_this) {
        return function() {
          var cmd;
          cmd = {
            name: "ffmpeg -i \"" + file + "\" -f mp3 -acodec libmp3lame -ab 192000 -ar 44100 \"" + file + "\".mp3",
            command: "ffmpeg -i \"" + file + "\" -f mp3 -acodec libmp3lame -ab 192000 -ar 44100 \"" + file + "\".mp3"
          };
          return _this.execute(cmd, function() {
            return typeof callback === "function" ? callback(file + ".mp3") : void 0;
          });
        };
      })(this));
    };

    return Say;

  })(Executer);

}).call(this);

//# sourceMappingURL=say.js.map
