// Generated by CoffeeScript 1.6.3
(function() {
  var Say, Wikipedia, cmdString, download, fs, gm, im, mkdirp, pad, path, request, speaker, _;

  Wikipedia = require('./wikipedia').Wikipedia;

  Say = require('./say').Say;

  path = require('path');

  mkdirp = require('mkdirp');

  _ = require('lodash');

  gm = require('gm');

  im = require('imagemagick');

  speaker = new Say('en');

  cmdString = function(text) {
    text = text.replace(/"/g, ' ');
    text = text.replace(/'/g, '');
    text = text.replace(/\(/g, '\\(');
    text = text.replace(/\)/g, '\\)');
    text = text.replace(/\|/g, '\\| ');
    text = text.replace(/\[/g, '\\[');
    return text = text.replace(/\]/g, '\\]');
  };

  pad = function(num, size) {
    var s;
    if (size == null) {
      size = 2;
    }
    s = num + "";
    while (s.length < size) {
      s = "0" + s;
    }
    return s;
  };

  fs = require("fs");

  request = require("request");

  download = function(uri, filename, callback) {
    var r;
    r = request(uri);
    r.pipe(fs.createWriteStream(filename));
    return r.on('end', callback);
  };

  exports.Manager = (function() {
    Manager.prototype.langs = ['en'];

    function Manager() {
      this.wiki = new Wikipedia();
    }

    Manager.prototype.pathOf = function(title) {
      return path.join(__dirname, '..', 'app', 'projects', title);
    };

    Manager.prototype.structure = function(title) {
      var p;
      p = this.pathOf(title);
      mkdirp.sync(p);
      mkdirp.sync(path.join(p, 'images'));
      return {
        root: p,
        images: path.join(p, 'images'),
        audio: path.join(p, 'audio.aiff'),
        text: path.join(p, 'text.txt')
      };
    };

    Manager.prototype.speak = function(title, textFile, audioFile, callback) {
      return speaker.produce(audioFile, textFile, function(file) {
        fs.unlink(audioFile);
        return typeof callback === "function" ? callback(file) : void 0;
      });
    };

    Manager.prototype.downloadImages = function(uri, images, callback) {
      var downloadImage, i, newImages;
      images = _.filter(images, function(image) {
        return image.name.indexOf('svg') < 0;
      });
      i = 0;
      newImages = [];
      downloadImage = function() {
        var dot, ext, img, out, padded;
        if (i >= images.length) {
          if (typeof callback === "function") {
            callback(newImages);
          }
          return;
        }
        img = images[i++];
        dot = img.name.lastIndexOf('.');
        padded = pad(i);
        ext = img.name.substring(dot);
        out = path.join(uri, padded + ext);
        return download(img.url, out, function() {
          var local, name;
          name = padded + '_resized' + ext;
          local = path.join(uri, name);
          return im.resize({
            srcPath: out,
            dstPath: local,
            width: 500,
            height: 500
          }, function(err, stdout, stderr) {
            img.name = name;
            img.status = 'success';
            if (err) {
              img.status = 'error';
              fs.unlink(path.join(uri, name));
            }
            newImages.push(img);
            fs.unlink(out);
            return downloadImage();
          });
        });
      };
      return downloadImage();
    };

    Manager.prototype.nameOf = function(title) {
      var name;
      name = title.toLowerCase();
      return name.replace(/\s/g, '_');
    };

    Manager.prototype.build = function(meta, onEnd) {
      var callback, imagesDownloaded, project, speakDone;
      meta.name = this.nameOf(meta.title);
      project = this.structure(meta.name);
      callback = _.after(2, function() {
        return onEnd(meta);
      });
      imagesDownloaded = function(images) {
        meta.images = images;
        return callback();
      };
      speakDone = function(audio) {
        meta.audio = audio;
        return callback();
      };
      this.downloadImages(project.images, meta.images, imagesDownloaded);
      fs.writeFileSync(project.text, meta.text);
      return this.speak(meta.title, project.text, project.audio, speakDone);
    };

    Manager.prototype.run = function(url, onEnd) {
      var callback, lang, _i, _len, _ref, _results,
        _this = this;
      callback = function(metadata) {
        return _this.build(metadata, onEnd);
      };
      if (url && url === 'random') {
        return this.wiki.randomEn(callback);
      } else if (url && url !== 'random') {
        return this.wiki.scrape(url, callback);
      } else {
        _ref = this.langs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lang = _ref[_i];
          _results.push(this.wiki.dailyArticle(lang, callback));
        }
        return _results;
      }
    };

    return Manager;

  })();

}).call(this);

/*
//@ sourceMappingURL=youwiki.map
*/
