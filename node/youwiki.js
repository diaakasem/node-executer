// Generated by CoffeeScript 1.6.3
(function() {
  var Manager, Say, Wikipedia, cmdString, download, fs, m, mkdirp, path, request, speaker;

  Wikipedia = require('./wikipedia').Wikipedia;

  Say = require('./say').Say;

  path = require('path');

  mkdirp = require('mkdirp');

  speaker = new Say('en');

  cmdString = function(text) {
    text = text.replace(/"/g, ' ');
    text = text.replace(/'/g, '');
    text = text.replace(/\(/g, ' ');
    text = text.replace(/\)/g, ' ');
    text = text.replace(/\|/g, ' ');
    text = text.replace(/\[/g, ' ');
    return text = text.replace(/\]/g, ' ');
  };

  fs = require("fs");

  request = require("request");

  download = function(uri, filename) {
    return request(uri).pipe(fs.createWriteStream(filename));
  };

  Manager = (function() {
    Manager.prototype.langs = ['en'];

    function Manager() {
      this.wiki = new Wikipedia();
    }

    Manager.prototype.pathOf = function(title) {
      return path.join(__dirname, '..', 'app', 'projects', title);
    };

    Manager.prototype.structure = function(title) {
      var p;
      p = this.pathOf(title);
      mkdirp.sync(p);
      mkdirp.sync(path.join(p, 'images'));
      return {
        root: p,
        images: path.join(p, 'images'),
        audio: path.join(p, 'audio.aiff'),
        text: path.join(p, 'text.txt')
      };
    };

    Manager.prototype.speak = function(title, textFile, audioFile) {
      title = cmdString(title);
      return speaker.produce(audioFile, textFile, function(file) {
        fs.unlink(audioFile);
        return console.log('Done : ' + file);
      });
    };

    Manager.prototype.downloadImages = function(uri, images) {
      var downloadImage, i;
      i = 0;
      downloadImage = function() {
        var dot, img;
        if (i >= images.length) {
          return;
        }
        img = images[i++];
        dot = img.name.lastIndexOf('.');
        download(img.url, path.join(uri, i + img.name.substring(dot)));
        return setTimeout(downloadImage, 500);
      };
      return setTimeout(downloadImage, 1000);
    };

    Manager.prototype.nameOf = function(title) {
      var name;
      name = title.toLowerCase();
      name = name.replace(/\s/g, '_');
      name = cmdString(name);
      return name;
    };

    Manager.prototype.build = function(title, text, images) {
      var project;
      project = this.structure(this.nameOf(title));
      this.downloadImages(project.images, images);
      fs.writeFileSync(project.text, text);
      return this.speak(title, project.text, project.audio);
    };

    Manager.prototype.run = function(url) {
      var lang, _i, _len, _ref, _results,
        _this = this;
      if (url) {
        return this.wiki.scrape(url, function(title, text, images) {
          return _this.build(title, text, images);
        });
      } else {
        _ref = this.langs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lang = _ref[_i];
          _results.push(this.wiki.dailyArticle(lang, function(title, text, images) {
            return _this.build(title, text, images);
          }));
        }
        return _results;
      }
    };

    return Manager;

  })();

  m = new Manager();

  if (process.argv.length > 1) {
    m.run(process.argv[2]);
  } else {
    m.run();
  }

}).call(this);

/*
//@ sourceMappingURL=youwiki.map
*/
